{"version":3,"sources":["webpack:///./src/components/contact/contact.js","webpack:///./src/templates/default.js"],"names":["getResponseClass","responseText","classNames","contact__actions__response","expanded","FormActions","_ref","loading","submitBtnTxt","btnTxt","content","react_default","a","createElement","index_es","className","icon","faSpinner","type","primary-btn","contact__actions__spinner","disabled","Contact","props","_this","_React$Component","call","this","handleSubmit","e","preventDefault","setState","form","target","errors","validateForm","length","data","FormData","sendToEmailService","handleChange","_this$setState","_e$target","name","value","state","email","message","push","NAME_IS_EMPTY","EMAIL_IS_EMPTY","match","EMAIL_FORMAT_REGEX","EMAIL_IS_NOT_FORMATTED","MESSAGE_IS_EMPTY","_this2","fetch","FORM_SUBMIT_URL","method","mode","headers","Accept","Content-Type","Access-Control-Allow-Origin","body","then","response","CONTACT_FORM_RESPONSE_SUCCESS","catch","error","CONTACT_FORM_RESPONSE_FAILURE","render","_this3","_this$props","_this$props$meta","meta","heading","address","elemId","_this$state","id","title","onSubmit","action","noValidate","placeholder","namePlaceholder","maxLength","onChange","required","includes","emailPlaceholder","messagePlaceholder","rows","contact_FormActions","style","display","faMapMarkerAlt","line1","line2","country","faEnvelope","React","Component","withLocation","withShowcase","DefaultTemplate","_ref2","components","pageContext","layout","map","i","comName","toLowerCase","banner","key","grid","callToAction","contact_contact","imageText","cards","hero","pills","quartet","networkGraph","componentResolver","position"],"mappings":"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","file":"component---src-templates-default-js-91422fe339047e0557fb.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faMapMarkerAlt,\n  faEnvelope,\n  faSpinner,\n} from '@fortawesome/free-solid-svg-icons'\nimport './contact.scss'\nimport withLocation from '../common/withLocation'\nimport withShowcase from '../common/withShowcase/withShowcase'\nimport {\n  CONTACT_FORM_RESPONSE_FAILURE,\n  CONTACT_FORM_RESPONSE_SUCCESS,\n  EMAIL_FORMAT_REGEX,\n  EMAIL_IS_EMPTY,\n  EMAIL_IS_NOT_FORMATTED,\n  FORM_SUBMIT_URL,\n  MESSAGE_IS_EMPTY,\n  NAME_IS_EMPTY,\n} from '../common/constants'\nimport classNames from 'classnames'\n\n/**\n * Utility to return classes for response area\n * @param responseText The response shown to the user after form submission\n * @returns {string}\n */\nconst getResponseClass = responseText =>\n  classNames({\n    contact__actions__response: true,\n    expanded: responseText,\n  })\n\n/**\n * Utility to return classes for submit button\n * @param loading Boolean while an AJAX call is in progress\n * @returns {string}\n */\nconst getSubmitButtonClass = () =>\n  classNames({\n    'primary-btn': true,\n    contact__actions__spinner: false,\n  })\n\n/**\n * The component that renders the form's actions bar. It contains the submit button and a message area\n * @param loading Boolean while an AJAX call is in progress\n * @param responseText The response shown to the user after form submission\n * @param submitBtnTxt User provided text of the submit button\n */\nconst FormActions = ({ loading, responseText, submitBtnTxt }) => {\n  const btnTxt = responseText ? 'OK' : submitBtnTxt\n  const content = loading ? (\n    <FontAwesomeIcon className={'contact__actions__spinner'} icon={faSpinner} />\n  ) : (\n    btnTxt\n  )\n  return (\n    <div className=\"contact__actions\">\n      <div className={getResponseClass(responseText)}>{responseText}</div>\n      <button\n        type=\"submit\"\n        className={getSubmitButtonClass(loading)}\n        disabled={loading}\n      >\n        {content}\n      </button>\n    </div>\n  )\n}\n\n/**\n * The class that renders the contact form\n */\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: '',\n      email: '',\n      message: '',\n      errors: [],\n      responseText: '',\n      loading: false,\n    }\n  }\n\n  /**\n   * Method to handle form submission\n   * @param e React's synthetic event\n   * @param responseText The response shown to the user after form submission\n   */\n  handleSubmit = (e, responseText) => {\n    e.preventDefault()\n    if (responseText) {\n      this.setState({ responseText: '' })\n      return\n    }\n    const form = e.target\n    const errors = this.validateForm(form)\n    if (errors.length > 0) {\n      this.setState({ errors })\n    } else {\n      this.setState({ errors: [] })\n      const data = new FormData(form)\n      this.sendToEmailService(data)\n    }\n  }\n\n  /**\n   * Method to handle input change\n   * @param e React's synthetic event\n   */\n  handleChange = e => {\n    const { name, value } = e.target\n    const form = this.state.form\n    this.setState({ [name]: value })\n  }\n\n  /**\n   * Method to validate form\n   * @param form The HTML form element\n   * @returns an array containing error strings\n   */\n  validateForm(form) {\n    let errors = []\n    !form.name.value && errors.push(NAME_IS_EMPTY)\n    !form.email.value && errors.push(EMAIL_IS_EMPTY)\n    form.email.value &&\n      !form.email.value.match(EMAIL_FORMAT_REGEX) &&\n      errors.push(EMAIL_IS_NOT_FORMATTED)\n    !form.message.value && errors.push(MESSAGE_IS_EMPTY)\n    return errors\n  }\n\n  /**\n   * Method used to submit contact for to an external email service\n   * @param data The form data\n   */\n  sendToEmailService(data) {\n    this.setState({ loading: true })\n    fetch(FORM_SUBMIT_URL, {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      body: data,\n    })\n      .then(response => {\n        this.setState({\n          responseText: CONTACT_FORM_RESPONSE_SUCCESS,\n          loading: false,\n          name: '',\n          email: '',\n          message: '',\n        })\n      })\n      .catch(error => {\n        this.setState({\n          responseText: CONTACT_FORM_RESPONSE_FAILURE,\n          loading: false,\n          name: '',\n          email: '',\n          message: '',\n        })\n      })\n  }\n\n  render() {\n    const {\n      meta: { heading, form, address },\n      elemId,\n    } = this.props\n    const { name, email, message, errors, responseText, loading } = this.state\n    return (\n      <section id={elemId} className=\"contact\">\n        <div className=\"container\">\n          <h1 className=\"text-center pb-60\">{heading}</h1>\n          <div className=\"row\">\n            <div className=\"col-lg-6\">\n              <h4 className=\"pb-15\">{form.title}</h4>\n              <form\n                name=\"contactForm\"\n                onSubmit={e => this.handleSubmit(e, responseText)}\n                action=\"https://formspree.io/hello@thesquaredev.com\"\n                method=\"POST\"\n                noValidate\n              >\n                <div className=\"mt-15\">\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder={form.namePlaceholder}\n                    maxLength=\"120\"\n                    className=\"single-input\"\n                    onChange={this.handleChange}\n                    value={name}\n                    required\n                  />\n                  {errors.includes('nameIsEmpty') && (\n                    <small className=\"form-text text-muted\">\n                      Please enter your name\n                    </small>\n                  )}\n                </div>\n                <div className=\"mt-15\">\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder={form.emailPlaceholder}\n                    maxLength=\"120\"\n                    className=\"single-input\"\n                    onChange={this.handleChange}\n                    value={email}\n                    required\n                  />\n                  {errors.includes('emailIsEmpty') && (\n                    <small className=\"form-text text-muted\">\n                      Please enter an email address\n                    </small>\n                  )}\n                  {errors.includes('emailIsNotFormatted') && (\n                    <small className=\"form-text text-muted\">\n                      Please provide a valid email\n                    </small>\n                  )}\n                </div>\n                <div className=\"mt-15 pb-25\">\n                  <textarea\n                    name=\"message\"\n                    placeholder={form.messagePlaceholder}\n                    maxLength=\"1000\"\n                    rows=\"5\"\n                    className=\"single-textarea\"\n                    onChange={this.handleChange}\n                    value={message}\n                    required\n                  />\n                  {errors.includes('messageIsEmpty') && (\n                    <small className=\"form-text text-muted\">\n                      Please enter a message to send\n                    </small>\n                  )}\n                </div>\n                <FormActions\n                  loading={loading}\n                  responseText={responseText}\n                  submitBtnTxt={form.submitBtnTxt}\n                />\n                <input\n                  name=\"_formsubmit_id\"\n                  type=\"text\"\n                  style={{ display: 'none' }}\n                />\n              </form>\n            </div>\n            <div className=\"contact__address col-lg-6\">\n              <h4 className=\"pb-15\">{address.title}</h4>\n              <div className=\"d-flex pt-15\">\n                <div className=\"contact__address__icon\">\n                  <FontAwesomeIcon icon={faMapMarkerAlt} />\n                </div>\n                <div className=\"pl-30\">\n                  <div className=\"pb-10\">{address.line1}</div>\n                  <div className=\"pb-10\">{address.line2}</div>\n                  <div className=\"pb-10\">{address.country}</div>\n                </div>\n              </div>\n              <div className=\"d-flex pt-15\">\n                <div className=\"contact__address__icon\">\n                  <FontAwesomeIcon icon={faEnvelope} />\n                </div>\n                <div className=\"pl-30\">{address.email}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default withLocation(withShowcase(Contact))\n","import React from 'react'\nimport Layout from '../components/layout/layout'\nimport Banner from '../components/banner/banner'\nimport Grid from '../components/grid/grid'\nimport CallToAction from '../components/callToAction/callToAction'\nimport Contact from '../components/contact/contact'\nimport ImageText from '../components/imageText/imageText'\nimport Cards from '../components/cards/cards'\nimport Hero from '../components/hero/hero'\nimport Pills from '../components/pills/pills'\nimport Quartet from '../components/quartet/quartet'\nimport NetworkGraph from '../components/networkGraph/networkGraph'\n\n/**\n * Utility to resolve the component in use\n * @param meta Component's meta\n * @param elemId Section's id, used for anchoring\n * @param i Index used for mapping\n */\nconst componentResolver = (meta, elemId, i) => ({\n  ['banner']: <Banner meta={meta} elemId={elemId} key={i} />,\n  ['grid']: <Grid meta={meta} elemId={elemId} key={i} />,\n  ['calltoaction']: <CallToAction meta={meta} elemId={elemId} key={i} />,\n  ['contact']: <Contact meta={meta} elemId={elemId} key={i} />,\n  ['imagetext']: <ImageText meta={meta} elemId={elemId} key={i} />,\n  ['cards']: <Cards meta={meta} elemId={elemId} key={i} />,\n  ['hero']: <Hero meta={meta} elemId={elemId} key={i} />,\n  ['pills']: <Pills meta={meta} elemId={elemId} key={i} />,\n  ['quartet']: <Quartet meta={meta} elemId={elemId} key={i} />,\n  ['networkgraph']: <NetworkGraph meta={meta} elemId={elemId} key={i} />,\n})\n\n/**\n * Component for laying out a default page\n * @param components\n */\nconst DefaultTemplate = ({ pageContext: { components } }) => (\n  <Layout>\n    {components.map((meta, i) => {\n      const comName = meta.name.toLowerCase()\n      const elemId = `${comName}${meta.position}`\n      return componentResolver(meta, elemId, i)[comName]\n    })}\n  </Layout>\n)\n\nexport default DefaultTemplate\n"],"sourceRoot":""}